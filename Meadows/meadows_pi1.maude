***(
Meadows_v2 process specification
)***

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts Msg, Fresh, Public, and GhostData
  protecting DEFINITION-PROTOCOL-RULES .
  
  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort Msg and Fresh are special and imported
  --- * Every sort must be a subsort of Msg
  --- * No sort can be a supersort of Msg
  ----------------------------------------------------------

  --- Sort Information 
  sorts Name Nonce Honest Intruder Key Mac Hash MsgGroup .
  subsort MsgGroup Mac < Msg . 
  subsort Name Nonce Hash Key < MsgGroup .
  subsort Name < Key .
  subsort Name < Public .
  subsort Honest Intruder < Name .

  --- Operator Meadows ---
  op mac : Key MsgGroup -> Mac .
  op key : Name Name -> Key [comm] . --- Symetric key
  op ok : -> Msg .
  op C : -> Msg .

    --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .

  --- The intruder cannot deconcatenate messages in this protocol
  op _;_ : MsgGroup  MsgGroup  -> MsgGroup [frozen gather (e E)] . ---assoc

  --- Principals
  ops a b : -> Honest .
  op i : -> Intruder .
  

  --- Exclusive or (DY strand not included to reduce search space) 
  op _*_ : MsgGroup MsgGroup -> MsgGroup [comm frozen prec 11 gather (e E)]  .
  op null : -> MsgGroup .

  --- HASH FUNCTION
  op H : MsgGroup -> Hash [frozen] .
  op pi1 : Hash -> MsgGroup [frozen] .

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  
  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties 
  --- of your protocol
  ----------------------------------------------------------

  *** Exclusive or properties
  vars XN YN : MsgGroup .
  eq XN * XN = null    [variant] .
  eq XN * XN * YN = YN [variant] .
  eq XN * null = XN    [variant] .

*** Hash function algebraic properties ***

  vars HA : Hash .
  vars X Z T T' : MsgGroup .
  var r : Fresh .
  eq H(pi1(HA)) = HA [variant] . --- firstPreImg


endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands 
  --- of your protocol
  ----------------------------------------------------------

  var Ke : Key .
  vars X Y : MsgGroup .
  vars r rA rB rA' rB' : Fresh .
  vars AB : Honest .
  vars A B : Name .
  var I : Intruder .
  vars N NA NB : Nonce .
  vars HA : Hash .
  var MC : Mac .

  eq STRANDS-DOLEVYAO =
     :: nil :: [ nil | +(null), nil ] & 
     :: nil :: [ nil | +(key(i,AB)), nil ] & --- Intruder is able to sent symetric key
     :: r ::   [ nil | +(n(i,r)), nil ] & --- Intruder is able to generate and send nonces
     :: nil :: [ nil | -(X), -(Y), +(X ; Y), nil ] &             
     :: nil :: [ nil | -(Ke), -(X), +(mac(Ke,X)), nil ] &
     ------------------------- HASH PROPERTIES ------------------------------
     :: nil :: [ nil | -(HA), +(pi1(HA)), nil ] &  --- fstPreImg
    :: nil :: [ nil | -(X), +(H(X)), nil ] &
    :: nil :: [ nil | -(X), -(Y), +(X * Y),  nil ]    
     --------------------------------------------------------------------------

  [nonexec] .

eq STRANDS-PROTOCOL =
--- Alice (Prover)
:: rA ::
[ nil |
  -(NB),
  +(NB * H(A ; n(A,rA))),
  +(mac(key(A,B), A ; n(A,rA) ; NB)),
  -(ok),
  nil]
&
 --- Bob (Verifier)
 :: rB ::
 [ nil |
    +(n(B, rB)),
    -(n(B, rB) * HA),
    -(mac(key(A,B), A ; NA ; n(B, rB))),
    (n(B, rB) * HA)
    eq
    (n(B, rB) * H(A ; NA)),
    +(ok),
    nil]
    [nonexec] .


  eq ATTACK-STATE(11) --- (firstPreImg)
    =
  --- Alice's Strand (Prover)
 :: rA ::
      [ nil,
        -(n(b, rB)),
        +(n(b, rB) * H(a ; n(a,rA))),
        +(mac(key(a,b), a ; n(a,rA) ; n(b, rB))),
        -(ok) |
        nil]
      &
      --- Bob (Verifier)
      :: rB ::
      [ nil,
          +(n(b, rB)),
          -(n(b, rB) * H(pi1(H(a ; n(a,rA))))),
          -(mac(key(a,b), a ; n(a,rA) ; n(b, rB))),
          (n(b, rB) * H(pi1(H(a ; n(a,rA)))))
          eq
          (n(b, rB) * H(a ; NA)),
          +(ok) |
          nil] 
          &
      :: nil ::
      [nil,
        -(H(a ; n(a,rA))),
        +(pi1(H(a ; n(a,rA)))) | nil] &
      :: nil ::
      [nil,
          -(pi1(H(a ; n(a,rA)))),
          +(H(pi1(H(a ; n(a,rA))))) | nil]
        || pi1(H(a ; n(a,rA))) != (a ; n(a,rA))
        || nil
        || nil
        || nil
    [nonexec] .
  
endfm

select MAUDE-NPA .
