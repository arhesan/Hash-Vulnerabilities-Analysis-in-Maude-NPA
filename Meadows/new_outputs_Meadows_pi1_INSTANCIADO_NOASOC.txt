nohup: ignoring input
./prueba_Meadows: 1: datedate
: not found
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude 3.5 built: Sep 25 2024 12:00:00
	     Copyright 1997-2024 SRI International
		   Sun Apr 27 22:15:59 2025
Advisory: "maude-npa.maude", line 14352 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14376 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14392 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M:Msg))))
    are bound before the matching takes place.

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude 3.0 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : displayGrammars .
rewrites: 1132856 in 3088ms cpu (3088ms real) (366857 rewrites/second)
result GrammarList: (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:Hash inL => pi1(#0:Hash) inL .  ; 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq #1:Name ; n(#1:Name, #2:Fresh) => H(#0:MsgGroup) inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq H(#1:Name ; n(#1:Name, #2:Fresh)) => #0:MsgGroup *
    #3:MsgGroup inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI => (#0:MsgGroup ; #1:MsgGroup) inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI => (#1:MsgGroup ; #0:MsgGroup) inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl key(#1:Name, #0:Name) notLeq key(i, #2:Honest) => key(#1:Name, #0:Name) inL
    . )
| 
grl #0:Key notInI,
   #0:Key notLeq key(#1:Name, #2:Name) => mac(#0:Key, #3:MsgGroup) inL . 
| 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq #1:Name ; n(#1:Name, #2:Fresh) ; #3:Nonce => mac(#4:Key,
    #0:MsgGroup) inL . 
| 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:Hash notInI => pi1(#0:Hash) inL . 
==========================================
reduce in MAUDE-NPA : summary(11, 0) .
rewrites: 5740 in 142ms cpu (141ms real) (40422 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(11, 0) .
rewrites: 96 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(11, 0) .
rewrites: 92 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(11, 2) .
rewrites: 3531864 in 4667ms cpu (4667ms real) (756773 rewrites/second)
result Summary: States>> 11 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(11, 2) .
rewrites: 339 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(11, 3) .
rewrites: 11103996 in 12047ms cpu (12047ms real) (921722 rewrites/second)
result Summary: States>> 19 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(11, 3) .
rewrites: 642 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(11, 4) .
rewrites: 52943523 in 46330ms cpu (46330ms real) (1142748 rewrites/second)
result Summary: States>> 32 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(11, 4) .
rewrites: 1191 in 1ms cpu (0ms real) (1191000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(11, 5) .
rewrites: 164008650 in 132368ms cpu (132372ms real) (1239035 rewrites/second)
result Summary: States>> 47 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(11, 5) .
rewrites: 2028 in 2ms cpu (1ms real) (1014000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(11, 6) .
rewrites: 369734499 in 281377ms cpu (281388ms real) (1314018 rewrites/second)
result Summary: States>> 54 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(11, 6) .
rewrites: 3000 in 2ms cpu (2ms real) (1500000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(11, 7) .
rewrites: 440577322 in 337849ms cpu (337857ms real) (1304065 rewrites/second)
result Summary: States>> 64 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(11, 7) .
rewrites: 4242 in 3ms cpu (3ms real) (1414000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(11, 8) .
rewrites: 600868095 in 438583ms cpu (438599ms real) (1370021 rewrites/second)
result Summary: States>> 84 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(11, 8) .
rewrites: 5985 in 6ms cpu (5ms real) (997500 rewrites/second)
result ShortIdSystem: < 1 . 2 . 1 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(pi1(H(a ; n(a, #0:Fresh)))), nil]  & 
:: nil ::
[ nil | 
   -(pi1(H(a ; n(a, #0:Fresh)))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi1(H(a ; n(a, #0:Fresh))) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi1(H(a ; n(a, #0:Fresh))) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(pi1(H(a ; n(a, #0:Fresh)))), 
-(pi1(H(a ; n(a, #0:Fresh)))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(11, 9) .
rewrites: 829968831 in 594438ms cpu (594462ms real) (1396224 rewrites/second)
result Summary: States>> 92 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(11, 9) .
rewrites: 7841 in 9ms cpu (8ms real) (871222 rewrites/second)
result ShortIdSystem: < 1 . 2 . 1 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(pi1(H(a ; n(a, #0:Fresh)))), nil]  & 
:: nil ::
[ nil | 
   -(pi1(H(a ; n(a, #0:Fresh)))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi1(H(a ; n(a, #0:Fresh))) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi1(H(a ; n(a, #0:Fresh))) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(pi1(H(a ; n(a, #0:Fresh)))), 
-(pi1(H(a ; n(a, #0:Fresh)))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(11, 10) .
