nohup: ignoring input
./prueba_Meadows: 1: datedate: not found
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude 3.5 built: Sep 25 2024 12:00:00
	     Copyright 1997-2024 SRI International
		   Sun Apr 20 16:59:52 2025
Advisory: "maude-npa.maude", line 14352 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14376 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14392 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M:Msg))))
    are bound before the matching takes place.

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude 3.0 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : displayGrammars .
rewrites: 1716404 in 2173ms cpu (2172ms real) (789877 rewrites/second)
result GrammarList: (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:T3 notInI => H(#0:T3) inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq H(#1:Name ; n(#1:Name, #2:Fresh)) => #0:MsgGroup *
    #3:MsgGroup inL . )
| (
grl #0:T4 inL => H(#0:T4) inL .  ; 
grl #0:T4 inL => pi2(#0:T4) inL .  ; 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI => (#0:MsgGroup ; #1:MsgGroup) inL . )
| (
grl #0:T4 inL => H(#0:T4) inL .  ; 
grl #0:T4 inL => pi2(#0:T4) inL .  ; 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq n(#1:Name, #2:Fresh) => (#3:MsgGroup ; #0:MsgGroup) inL .
    )
| (
grl #0:T4 inL => H(#0:T4) inL .  ; 
grl #0:T4 inL => pi2(#0:T4) inL .  ; 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:T2 notInI => inLeak(#0:T2) inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl key(#1:Name, #0:Name) notLeq key(i, #2:Honest) => key(#1:Name, #0:Name) inL
    . )
| 
grl #0:Key notInI,
   #0:Key notLeq key(#1:Name, #2:Name) => mac(#0:Key, #3:MsgGroup) inL . 
| 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq #1:Name ; n(#1:Name, #2:Fresh) ; #3:Nonce => mac(#4:Key,
    #0:MsgGroup) inL . 
| 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:T4 notInI => pi2(#0:T4) inL . 
==========================================
reduce in MAUDE-NPA : summary(10, 0) .
rewrites: 6368 in 81ms cpu (80ms real) (78617 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(10, 0) .
rewrites: 96 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 0) .
rewrites: 92 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 2) .
rewrites: 28558320 in 13362ms cpu (13361ms real) (2137278 rewrites/second)
result Summary: States>> 35 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 2) .
rewrites: 782 in 1ms cpu (0ms real) (782000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 3) .
rewrites: 214744521 in 88408ms cpu (88408ms real) (2429016 rewrites/second)
result Summary: States>> 69 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 3) .
rewrites: 1877 in 1ms cpu (0ms real) (1877000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 4) .
rewrites: 770081723 in 308921ms cpu (308920ms real) (2492811 rewrites/second)
result Summary: States>> 122 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 4) .
rewrites: 3935 in 1ms cpu (1ms real) (3935000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 5) .
rewrites: 3234290940 in 1264378ms cpu (1264378ms real) (2558009
    rewrites/second)
result Summary: States>> 193 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 5) .
rewrites: 7443 in 3ms cpu (3ms real) (2481000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 6) .
rewrites: 9989781718 in 3885779ms cpu (3885779ms real) (2570856
    rewrites/second)
result Summary: States>> 279 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 6) .
rewrites: 12778 in 7ms cpu (6ms real) (1825428 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 7) .
rewrites: 18069985048 in 7030734ms cpu (7030734ms real) (2570142
    rewrites/second)
result Summary: States>> 362 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 7) .
rewrites: 19895 in 16ms cpu (15ms real) (1243437 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 8) .
rewrites: 37472794403 in 14689493ms cpu (14689493ms real) (2550993
    rewrites/second)
result Summary: States>> 411 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 8) .
rewrites: 28006 in 27ms cpu (27ms real) (1037259 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 9) .
rewrites: 94644413364 in 37849996ms cpu (37849995ms real) (2500513
    rewrites/second)
result Summary: States>> 406 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 9) .
rewrites: 35881 in 57ms cpu (57ms real) (629491 rewrites/second)
result ShortIdSystem: < 1 . 3 . 3 . 1 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
Warning: <standard input>, line 23: didn't expect token ):
summary ( 10 , 10 , ) <---*HERE*
Warning: <standard input>, line 23: no parse for term.
Warning: <standard input>, line 24: didn't expect token ):
initials ( 10 , 10 , ) <---*HERE*
Warning: <standard input>, line 24: no parse for term.
Warning: <standard input>, line 25: didn't expect token ):
summary ( 10 , 10 , ) <---*HERE*
Warning: <standard input>, line 25: no parse for term.
Warning: <standard input>, line 26: didn't expect token ):
initials ( 10 , 10 , ) <---*HERE*
Warning: <standard input>, line 26: no parse for term.
==========================================
reduce in MAUDE-NPA : summary(10, 12) .
