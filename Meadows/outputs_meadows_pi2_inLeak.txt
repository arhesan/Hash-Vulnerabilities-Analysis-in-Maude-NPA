nohup: ignoring input
./prueba_Meadows: 1: datedate
: not found
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude 3.5 built: Sep 25 2024 12:00:00
	     Copyright 1997-2024 SRI International
		   Sun Apr 27 22:13:31 2025
Advisory: "maude-npa.maude", line 14352 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14376 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14392 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M:Msg))))
    are bound before the matching takes place.

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude 3.0 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : displayGrammars .
rewrites: 1716404 in 4019ms cpu (4018ms real) (427072 rewrites/second)
result GrammarList: (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:T3 notInI => H(#0:T3) inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq H(#1:Name ; n(#1:Name, #2:Fresh)) => #0:MsgGroup *
    #3:MsgGroup inL . )
| (
grl #0:T4 inL => H(#0:T4) inL .  ; 
grl #0:T4 inL => pi2(#0:T4) inL .  ; 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI => (#0:MsgGroup ; #1:MsgGroup) inL . )
| (
grl #0:T4 inL => H(#0:T4) inL .  ; 
grl #0:T4 inL => pi2(#0:T4) inL .  ; 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq n(#1:Name, #2:Fresh) => (#3:MsgGroup ; #0:MsgGroup) inL .
    )
| (
grl #0:T4 inL => H(#0:T4) inL .  ; 
grl #0:T4 inL => pi2(#0:T4) inL .  ; 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:T2 notInI => inLeak(#0:T2) inL . )
| (
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl key(#1:Name, #0:Name) notLeq key(i, #2:Honest) => key(#1:Name, #0:Name) inL
    . )
| 
grl #0:Key notInI,
   #0:Key notLeq key(#1:Name, #2:Name) => mac(#0:Key, #3:MsgGroup) inL . 
| 
grl #0:MsgGroup notInI,
   #0:MsgGroup notLeq #1:Name ; n(#1:Name, #2:Fresh) ; #3:Nonce => mac(#4:Key,
    #0:MsgGroup) inL . 
| 
grl #0:MsgGroup inL => #1:MsgGroup * #0:MsgGroup inL .  ; 
grl #0:T4 notInI => pi2(#0:T4) inL . 
==========================================
reduce in MAUDE-NPA : summary(10, 0) .
rewrites: 6368 in 154ms cpu (153ms real) (41350 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(10, 0) .
rewrites: 96 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 0) .
rewrites: 92 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 2) .
rewrites: 7879484 in 7212ms cpu (7211ms real) (1092551 rewrites/second)
result Summary: States>> 18 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 2) .
rewrites: 462 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 3) .
rewrites: 53134739 in 39299ms cpu (39298ms real) (1352063 rewrites/second)
result Summary: States>> 37 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 3) .
rewrites: 1069 in 1ms cpu (0ms real) (1069000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 4) .
rewrites: 224600339 in 169729ms cpu (169729ms real) (1323287 rewrites/second)
result Summary: States>> 61 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 4) .
rewrites: 2116 in 2ms cpu (1ms real) (1058000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 5) .
rewrites: 723014076 in 517886ms cpu (517886ms real) (1396087 rewrites/second)
result Summary: States>> 93 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 5) .
rewrites: 3819 in 3ms cpu (2ms real) (1273000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 6) .
rewrites: 1989486064 in 1341730ms cpu (1341730ms real) (1482776
    rewrites/second)
result Summary: States>> 133 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 6) .
rewrites: 6377 in 5ms cpu (5ms real) (1275400 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 7) .
rewrites: 3180423083 in 2185152ms cpu (2185151ms real) (1455469
    rewrites/second)
result Summary: States>> 168 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(10, 7) .
rewrites: 9684 in 10ms cpu (10ms real) (968400 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(10, 8) .
rewrites: 6419010271 in 4280615ms cpu (4280615ms real) (1499553
    rewrites/second)
result Summary: States>> 186 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 8) .
rewrites: 13402 in 20ms cpu (19ms real) (670100 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 9) .
rewrites: 15712581946 in 6665782ms cpu (6665782ms real) (2357200
    rewrites/second)
result Summary: States>> 173 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 9) .
rewrites: 16694 in 16ms cpu (15ms real) (1043375 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 10) .
rewrites: 11894040846 in 5280667ms cpu (5280666ms real) (2252374
    rewrites/second)
result Summary: States>> 143 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 10) .
rewrites: 19362 in 34ms cpu (33ms real) (569470 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 11) .
rewrites: 4483802080 in 2717947ms cpu (2717946ms real) (1649701
    rewrites/second)
result Summary: States>> 98 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 11) .
rewrites: 20969 in 53ms cpu (53ms real) (395641 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 12) .
rewrites: 2818418221 in 1853274ms cpu (1853273ms real) (1520777
    rewrites/second)
result Summary: States>> 48 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 12) .
rewrites: 21446 in 64ms cpu (63ms real) (335093 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 13) .
rewrites: 1250354265 in 887525ms cpu (887525ms real) (1408810 rewrites/second)
result Summary: States>> 22 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 13) .
rewrites: 21629 in 69ms cpu (69ms real) (313463 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 14) .
rewrites: 647873190 in 463305ms cpu (463304ms real) (1398372 rewrites/second)
result Summary: States>> 10 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 14) .
rewrites: 21700 in 66ms cpu (66ms real) (328787 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 15) .
rewrites: 190432226 in 167523ms cpu (167523ms real) (1136752 rewrites/second)
result Summary: States>> 2 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 15) .
rewrites: 21632 in 72ms cpu (71ms real) (300444 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 16) .
rewrites: 1283935 in 1772ms cpu (1772ms real) (724568 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 16) .
rewrites: 21632 in 72ms cpu (72ms real) (300444 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 17) .
rewrites: 21639 in 72ms cpu (72ms real) (300541 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 17) .
rewrites: 21633 in 73ms cpu (72ms real) (296342 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 18) .
rewrites: 21639 in 73ms cpu (72ms real) (296424 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 18) .
rewrites: 21633 in 73ms cpu (73ms real) (296342 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 19) .
rewrites: 21639 in 74ms cpu (73ms real) (292418 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 19) .
rewrites: 21633 in 73ms cpu (72ms real) (296342 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(10, 20) .
rewrites: 21639 in 74ms cpu (74ms real) (292418 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(10, 20) .
rewrites: 21633 in 74ms cpu (74ms real) (292337 rewrites/second)
result ShortIdSystem: < 1 . 2 . 2 . 1 . 1 . 2 . 8{2} . 3 . 1 > (
:: nil ::
[ nil | 
   -(H(a ; n(a, #0:Fresh))), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pi2(a ; n(a, #0:Fresh))), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pi2(a ; n(a, #0:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(n(b, #1:Fresh)), 
   -(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   -(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   (H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)) eq (H(a ; n(a, #0:Fresh)) * n(b,
    #1:Fresh)), 
   +(ok), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
   +(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
   -(ok), nil] )
| 
ok !inI,
H(a ; n(a, #0:Fresh)) !inI,
pi2(a ; n(a, #0:Fresh)) !inI,
mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh) !inI,
pi2(a ; n(a, #0:Fresh)) != a ; n(a, #0:Fresh)
| 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
+(H(a ; n(a, #0:Fresh))), 
+(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
-(H(a ; n(a, #0:Fresh)) * n(b, #1:Fresh)), 
-(mac(key(a, b), a ; n(a, #0:Fresh) ; n(b, #1:Fresh))), 
+(ok), 
-(H(a ; n(a, #0:Fresh))), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pi2(a ; n(a, #0:Fresh))), 
-(pi2(a ; n(a, #0:Fresh))), 
+(H(a ; n(a, #0:Fresh))), 
-(ok)
| 
nil
Warning: <standard input>, line 45: skipped unexpected token: EOF
Warning: <standard input>, line 46: skipped unexpected token: date
Bye.
