nohup: ignoring input
./prueba_SIGMA: 1: cp23,datedate: not found
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude 3.5 built: Sep 25 2024 12:00:00
	     Copyright 1997-2024 SRI International
		   Tue Apr 29 10:58:22 2025
Advisory: "maude-npa.maude", line 14352 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14376 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M':Msg))))
    are bound before the matching takes place.
Advisory: "maude-npa.maude", line 14392 (fmod BACK-NARROWING): all the
    variables in the left-hand side of assignment condition fragment M:Msg :=
    downMsgSet(getTerm(metaReduce(removeVariantLabel(clearNonExecEqs(eraseRls(
    onlyEqsNoBuiltInUnify(flipRls(STRAND-EXAMPLE-RULES))))), upTerm(M:Msg))))
    are bound before the matching takes place.

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude 3.0 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : displayGrammars .
rewrites: 7096790 in 5547ms cpu (5547ms real) (1279392 rewrites/second)
result GrammarList: (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq #1:MsgElem ; cp2(#2:MsgElem ; #3:MsgElem ; #4:MsgElem,
    #1:MsgElem) ; #5:MsgElem ; #6:MsgElem),
   (#0:Msg notLeq #7:Exp ; #8:Msg ; exp(g, n(#9:Name, #10:Fresh)) ; #9:Name),
   #0:Msg notLeq exp(g, n(#11:Name, #12:Fresh)) ; #11:Name ; #13:Exp ; #14:Msg
    => H(#0:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI,
   #0:Msg notLeq exp(g, n(#1:Name, #2:Fresh)) => (#0:Msg ; #3:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI => (#1:Msg ; #0:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI => cp1(#0:Msg, #1:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI => cp1(#1:Msg, #0:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl cp1(#0:Msg, #1:Msg) notLeq cp1(#2:MsgElem ; #3:MsgElem ; #4:MsgElem,
    #5:MsgElem) => cp1(#0:Msg, #1:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI => cp2(#0:Msg, #1:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI => cp2(#1:Msg, #0:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl cp2(#0:Msg, #1:Msg) notLeq cp2(#2:MsgElem ; #3:MsgElem ; #4:MsgElem,
    #5:MsgElem) => cp2(#0:Msg, #1:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:GenvExp notInI => exp(#0:GenvExp, #1:NeNonceSet) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:NeNonceSet notInI,
   (#0:NeNonceSet notLeq n(#1:Name, #2:Fresh)),
   #0:NeNonceSet notLeq #3:NeNonceSet * #4:NeNonceSet => exp(#5:GenvExp,
    #0:NeNonceSet) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl n(#0:Name, #1:Fresh) notLeq n(i, #2:Fresh) => n(#0:Name, #1:Fresh) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Key notInI,
   #0:Key notLeq sk(#1:Name) => sign(#0:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq H(#1:MsgElem ; cp2(#2:MsgElem ; #3:MsgElem ; #4:MsgElem,
    #1:MsgElem) ; #5:MsgElem ; #6:MsgElem)),
   (#0:Msg notLeq H(#7:Exp ; #8:Msg ; exp(g, n(#9:Name, #10:Fresh)) ;
    #9:Name)),
   #0:Msg notLeq H(exp(g, n(#11:Name, #12:Fresh)) ; #11:Name ; #13:Exp ;
    #14:Msg) => sign(#15:Key, #0:Msg) inL . )
| 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => sign(sk(#1:Name), #0:Msg) inL .  ; 
grl (sign(#0:Key, #1:Msg) notLeq sign(sk(i), #2:Msg)),
   (sign(#0:Key, #1:Msg) notLeq sign(sk(#3:Name), H(#4:MsgElem ; cp2(#5:MsgElem
    ; #6:MsgElem ; #7:MsgElem, #4:MsgElem) ; #8:MsgElem ; #9:MsgElem))),
   (sign(#0:Key, #1:Msg) notLeq sign(sk(#10:Name), H(#11:Exp ; #12:Msg ; exp(g,
    n(#10:Name, #13:Fresh)) ; #10:Name))),
   sign(#0:Key, #1:Msg) notLeq sign(sk(#14:Name), H(exp(g, n(#14:Name,
    #15:Fresh)) ; #14:Name ; #16:Exp ; #17:Msg)) => sign(#0:Key, #1:Msg) inL . 
==========================================
reduce in MAUDE-NPA : summary(3, 0) .
rewrites: 8519 in 78ms cpu (78ms real) (109217 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(3, 0) .
rewrites: 92 in 1ms cpu (0ms real) (92000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(3, 1) .
rewrites: 1243585 in 796ms cpu (796ms real) (1562292 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(3, 1) .
rewrites: 143 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(3, 2) .
rewrites: 9824691 in 5549ms cpu (5549ms real) (1770533 rewrites/second)
result Summary: States>> 13 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(3, 2) .
rewrites: 351 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(3, 3) .
rewrites: 61802563 in 29261ms cpu (29260ms real) (2112113 rewrites/second)
result Summary: States>> 24 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(3, 3) .
rewrites: 733 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(3, 4) .
rewrites: 134133431 in 61805ms cpu (61805ms real) (2170268 rewrites/second)
result Summary: States>> 42 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(3, 4) .
rewrites: 1458 in 1ms cpu (0ms real) (1458000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(3, 5) .
rewrites: 236714669 in 107407ms cpu (107407ms real) (2203903 rewrites/second)
result Summary: States>> 47 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(3, 5) .
rewrites: 2202 in 1ms cpu (1ms real) (2202000 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(3, 6) .
rewrites: 366722068 in 143290ms cpu (143290ms real) (2559299 rewrites/second)
result Summary: States>> 50 Solutions>> 0
==========================================
reduce in MAUDE-NPA : initials(3, 6) .
rewrites: 3065 in 2ms cpu (1ms real) (1532500 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : summary(3, 7) .
rewrites: 535538819 in 201034ms cpu (201034ms real) (2663921 rewrites/second)
result Summary: States>> 55 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(3, 7) .
rewrites: 4012 in 1ms cpu (1ms real) (4012000 rewrites/second)
result ShortIdSystem: < 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 8) .
rewrites: 848092798 in 300385ms cpu (300384ms real) (2823352 rewrites/second)
result Summary: States>> 64 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(3, 8) .
rewrites: 5217 in 3ms cpu (2ms real) (1739000 rewrites/second)
result ShortIdSystem: < 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 9) .
rewrites: 1141588415 in 389105ms cpu (389105ms real) (2933882 rewrites/second)
result Summary: States>> 65 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(3, 9) .
rewrites: 6419 in 4ms cpu (3ms real) (1604750 rewrites/second)
result ShortIdSystem: < 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 10) .
rewrites: 1617493789 in 537832ms cpu (537831ms real) (3007433 rewrites/second)
result Summary: States>> 72 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(3, 10) .
rewrites: 7900 in 5ms cpu (4ms real) (1580000 rewrites/second)
result ShortIdSystem: < 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 11) .
rewrites: 2299419626 in 774592ms cpu (774592ms real) (2968555 rewrites/second)
result Summary: States>> 77 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(3, 11) .
rewrites: 9534 in 7ms cpu (6ms real) (1362000 rewrites/second)
result ShortIdSystem: < 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 12) .
rewrites: 2392799587 in 861737ms cpu (861737ms real) (2776716 rewrites/second)
result Summary: States>> 63 Solutions>> 1
==========================================
reduce in MAUDE-NPA : initials(3, 12) .
rewrites: 10632 in 9ms cpu (9ms real) (1181333 rewrites/second)
result ShortIdSystem: < 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 13) .
rewrites: 1807601638 in 710140ms cpu (710140ms real) (2545415 rewrites/second)
result Summary: States>> 42 Solutions>> 2
==========================================
reduce in MAUDE-NPA : initials(3, 13) .
rewrites: 11179 in 9ms cpu (9ms real) (1242111 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 14) .
rewrites: 707065552 in 327434ms cpu (327433ms real) (2159413 rewrites/second)
result Summary: States>> 18 Solutions>> 2
==========================================
reduce in MAUDE-NPA : initials(3, 14) .
rewrites: 11118 in 9ms cpu (9ms real) (1235333 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 15) .
rewrites: 463838340 in 203031ms cpu (203031ms real) (2284569 rewrites/second)
result Summary: States>> 15 Solutions>> 3
==========================================
reduce in MAUDE-NPA : initials(3, 15) .
rewrites: 11391 in 11ms cpu (10ms real) (1035545 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
(< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 1 . 1 . 1 . 4 . 5 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil]  & 
:: #4:Fresh ::
[ nil | 
   +(exp(g, n(a, #4:Fresh)) ; a), 
   -(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ;
    #7:MsgElem ; #8:MsgElem))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(exp(g, n(a, #4:Fresh)) ; a), 
generatedByIntruder(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
-(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ; #7:MsgElem ;
    #8:MsgElem))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 16) .
rewrites: 417190050 in 199305ms cpu (199304ms real) (2093224 rewrites/second)
result Summary: States>> 13 Solutions>> 3
==========================================
reduce in MAUDE-NPA : initials(3, 16) .
rewrites: 11637 in 13ms cpu (12ms real) (895153 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
(< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 1 . 1 . 1 . 4 . 5 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil]  & 
:: #4:Fresh ::
[ nil | 
   +(exp(g, n(a, #4:Fresh)) ; a), 
   -(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ;
    #7:MsgElem ; #8:MsgElem))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(exp(g, n(a, #4:Fresh)) ; a), 
generatedByIntruder(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
-(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ; #7:MsgElem ;
    #8:MsgElem))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 17) .
rewrites: 429388088 in 212580ms cpu (212580ms real) (2019889 rewrites/second)
result Summary: States>> 12 Solutions>> 3
==========================================
reduce in MAUDE-NPA : initials(3, 17) .
rewrites: 11864 in 15ms cpu (14ms real) (790933 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
(< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 1 . 1 . 1 . 4 . 5 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil]  & 
:: #4:Fresh ::
[ nil | 
   +(exp(g, n(a, #4:Fresh)) ; a), 
   -(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ;
    #7:MsgElem ; #8:MsgElem))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(exp(g, n(a, #4:Fresh)) ; a), 
generatedByIntruder(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
-(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ; #7:MsgElem ;
    #8:MsgElem))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 18) .
rewrites: 357383628 in 186822ms cpu (186821ms real) (1912963 rewrites/second)
result Summary: States>> 10 Solutions>> 3
==========================================
reduce in MAUDE-NPA : initials(3, 18) .
rewrites: 12013 in 11ms cpu (11ms real) (1092090 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
(< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 1 . 1 . 1 . 4 . 5 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil]  & 
:: #4:Fresh ::
[ nil | 
   +(exp(g, n(a, #4:Fresh)) ; a), 
   -(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ;
    #7:MsgElem ; #8:MsgElem))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(exp(g, n(a, #4:Fresh)) ; a), 
generatedByIntruder(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
-(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ; #7:MsgElem ;
    #8:MsgElem))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 19) .
rewrites: 205119986 in 110747ms cpu (110746ms real) (1852149 rewrites/second)
result Summary: States>> 7 Solutions>> 3
==========================================
reduce in MAUDE-NPA : initials(3, 19) .
rewrites: 12054 in 11ms cpu (11ms real) (1095818 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
(< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 1 . 1 . 1 . 4 . 5 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil]  & 
:: #4:Fresh ::
[ nil | 
   +(exp(g, n(a, #4:Fresh)) ; a), 
   -(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ;
    #7:MsgElem ; #8:MsgElem))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(exp(g, n(a, #4:Fresh)) ; a), 
generatedByIntruder(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
-(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ; #7:MsgElem ;
    #8:MsgElem))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
==========================================
reduce in MAUDE-NPA : summary(3, 20) .
rewrites: 52543529 in 32799ms cpu (32799ms real) (1601985 rewrites/second)
result Summary: States>> 4 Solutions>> 3
==========================================
reduce in MAUDE-NPA : initials(3, 20) .
rewrites: 12012 in 16ms cpu (15ms real) (750750 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 1 . 6 . 2 . 1 > (
:: #0:Fresh ::
[ nil | 
   +(exp(g, n(a, #0:Fresh)) ; a), 
   -(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ;
    #3:MsgElem ; #4:MsgElem))), 
   -(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #5:Fresh ::
[ nil | 
   +(exp(g, n(a, #5:Fresh)) ; a), 
   -(exp(g, n(b, #6:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))),
    nil]  & 
:: #6:Fresh ::
[ nil | 
   -(exp(g, n(a, #5:Fresh)) ; a), 
   +(exp(g, n(b, #6:Fresh)) ; b), 
   -(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   +(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem) !inI,
(exp(g, n(a, #5:Fresh)) ; a) !inI,
(exp(g, n(b, #6:Fresh)) ; b) !inI,
sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI,
sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b)) !inI
| 
+(exp(g, n(a, #5:Fresh)) ; a), 
-(exp(g, n(a, #5:Fresh)) ; a), 
+(exp(g, n(b, #6:Fresh)) ; b), 
-(exp(g, n(b, #6:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(exp(g, n(a, #0:Fresh)) ; a), 
generatedByIntruder(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
-(#1:Exp ; #2:MsgElem ; #3:MsgElem ; #4:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #0:Fresh)) ; a ; #1:Exp ; #2:MsgElem ; #3:MsgElem ;
    #4:MsgElem))), 
-(sign(sk(b), H(exp(g, n(a, #5:Fresh)) ; a ; exp(g, n(b, #6:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
(< 1 . 1 . 2 . 5 . 3 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil)
< 1 . 1 . 1 . 1 . 1 . 4 . 5 . 6 . 6 . 2 . 8 . 8 . 9 . 5 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#2:Exp), 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), 
   +(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), nil]  & 
:: nil ::
[ nil | 
   -(#0:Exp), 
   -(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh))), 
   -(a ; #2:Exp), 
   +(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a), 
   +(exp(g, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
   -(#0:Exp), 
   +(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), nil]  & 
:: nil ::
[ nil | 
   -(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: nil ::
[ nil | 
   -(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   -(exp(g, n(b, #3:Fresh)) ; b), 
   +(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh))
    ; b), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(exp(g, n(a, #1:Fresh)) ; a), 
   -(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
   +(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
   +(exp(g, n(b, #3:Fresh)) ; b), 
   -(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   -(ok), nil]  & 
:: #4:Fresh ::
[ nil | 
   +(exp(g, n(a, #4:Fresh)) ; a), 
   -(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
   +(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ;
    #7:MsgElem ; #8:MsgElem))), 
   -(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
   +(ok), nil] )
| 
ok !inI,
#2:Exp !inI,
#0:Exp !inI,
exp(g, n(a, #1:Fresh)) !inI,
(a ; #2:Exp) !inI,
(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b) !inI,
(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)) !inI,
(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem) !inI,
(exp(g, n(a, #1:Fresh)) ; a) !inI,
(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp) !inI,
(exp(g, n(b, #3:Fresh)) ; b) !inI,
(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)
    !inI,
sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a, #1:Fresh))
    ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b)) !inI,
sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(
    g, n(b, #3:Fresh)) ; b)) !inI,
cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI,
cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) !inI
| 
+(exp(g, n(a, #1:Fresh)) ; a), 
-(exp(g, n(a, #1:Fresh)) ; a), 
+(exp(g, n(a, #1:Fresh))), 
generatedByIntruder(#2:Exp), 
generatedByIntruder(a ; #2:Exp), 
-(exp(g, n(a, #1:Fresh))), 
-(a ; #2:Exp), 
+(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
generatedByIntruder(#0:Exp), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp), 
-(#0:Exp), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp), 
-(cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
+(exp(g, n(b, #3:Fresh)) ; b), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp)), 
-(exp(g, n(b, #3:Fresh)) ; b), 
+(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
-(#2:Exp), 
-(cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ;
    b), 
+(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
-(#2:Exp ; cp1(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b,
    #3:Fresh)) ; b), 
+(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp ; cp1(exp(g, n(a,
    #1:Fresh)) ; a ; #2:Exp, #0:Exp) ; exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
-(sign(sk(a), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(exp(g, n(a, #4:Fresh)) ; a), 
generatedByIntruder(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
-(#5:Exp ; #6:MsgElem ; #7:MsgElem ; #8:MsgElem), 
+(sign(sk(a), H(exp(g, n(a, #4:Fresh)) ; a ; #5:Exp ; #6:MsgElem ; #7:MsgElem ;
    #8:MsgElem))), 
-(sign(sk(b), H(#0:Exp ; cp2(exp(g, n(a, #1:Fresh)) ; a ; #2:Exp, #0:Exp) ;
    exp(g, n(b, #3:Fresh)) ; b))), 
+(ok), 
-(ok)
| 
nil
Warning: <standard input>, line 46: skipped unexpected token: EOF
Warning: <standard input>, line 47: skipped unexpected token: date
Bye.
