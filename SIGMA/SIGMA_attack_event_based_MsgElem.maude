
***(
SIGMA PROTOCOL --- Event-Based Modelling to model CPC and ColExt Attacks ---
)***

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts Msg, Fresh, Public
  protecting DEFINITION-PROTOCOL-RULES .
  
  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort Msg and Fresh are special and imported
  --- * Every sort must be a subsort of Msg
  --- * No sort can be a supersort of Msg
  ----------------------------------------------------------

  --- Sort Information 
  sorts Name Nonce NeNonceSet Gen Exp Key GenvExp Hash MsgElem .
  subsort Gen Exp < GenvExp .
  subsort Name Exp < MsgElem .
  subsort NeNonceSet GenvExp Key Hash MsgElem < Msg .
  --- subsort Exp < Key .
  subsort Name < Public . --- This is quite relevant and necessary
  subsort Gen < Public . --- This is quite relevant and necessary

  --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .

  --- Participants
  ops a b i : -> Name .

  --- Exp
  op exp : GenvExp NeNonceSet -> Exp [frozen] .

  --- Gen
  op g : -> Gen .

  --- --- NeNonceSet
  subsort Nonce < NeNonceSet .
  op _*_ : NeNonceSet NeNonceSet -> NeNonceSet [frozen assoc comm] .

  --- Concatenation
  op _;_ : Msg Msg -> Msg [frozen gather(e E)] .


  ---- Sign
  op sign : Key Msg -> Msg [frozen] .
  op sk : Name -> Key [frozen] .

  --- Hash
  op H : Msg -> Hash [frozen] .

  op cp1 : Msg Msg -> MsgElem [frozen] . --- Restringir tipos
  op cp2 : Msg Msg -> MsgElem [frozen] .

  op ok : -> Msg .

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  
  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties 
  --- of your protocol
  ----------------------------------------------------------
  *** DH ALGEBRAIC PROPERTIES ***
  eq exp(exp(W:Gen,Y:NeNonceSet),Z:NeNonceSet) 
   = exp(W:Gen, Y:NeNonceSet * Z:NeNonceSet) [variant] .

endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands 
  --- of your protocol
  ----------------------------------------------------------
  vars rA rB rA' rB' : Fresh .
  vars NS1 NS2 NS3 NS : NeNonceSet .
  var GE : GenvExp .
  vars A B : Name .
  var r : Fresh .
  vars EXPA EXPB EXPI : Exp .
  vars INFA INFB M1 M2 M : Msg .
  vars H1 H2 : Hash .
  vars S X Y : Msg .
  var X1 X2 X3 Y1 S1 S2 Z1 Z2 Z3 Z4 : MsgElem . 


  eq STRANDS-DOLEVYAO = 
    ---  :: nil :: [ nil | -(M1 ; X1 ; M2), +(X1), nil ] &
    ---  :: nil :: [ nil | -(M1 ; X1), +(X1), nil ] &
    ---  :: nil :: [ nil | -(X1 ; M2), +(X1), nil ] &
    ---  :: nil :: [ nil | -(X1), -(M1 ; M2), +(M1 ; X1 ; M2), nil ] &
    ---  :: nil :: [ nil | -(X1), -(M2), +(X1 ; M2), nil ] &
    ---  :: nil :: [ nil | -(X1), -(M1), +(M1 ; X1), nil ] &
     :: nil :: [ nil | -(M1 ; M2), +(M1), nil ] &
     :: nil :: [ nil | -(M1 ; M2), +(M2), nil ] &
     :: nil :: [ nil | -(M1), -(M2), +(M1 ; M2), nil ] &
     :: nil :: [ nil | -(NS1), -(NS2), +(NS1 * NS2), nil ] &
     :: nil :: [ nil | -(GE), -(NS), +(exp(GE,NS)), nil ] &
    ---  :: nil :: [ nil | -(exp(GE,NS)), +(GE), nil ] &
     :: r ::   [ nil | +(n(i,r)), nil ] &
     :: nil :: [ nil | +(g), nil ] &
     :: nil :: [ nil | +(A), nil ] &
     :: nil :: [ nil | -(M), +(sign(sk(i),M)), nil ] &
     :: nil :: [ nil | -(sign(sk(A),M)), +(M), nil ] & 
     ------------------------- HASH PROPERTIES ------------------------------
     :: nil :: [ nil | -(X), +(H(X)), nil ] &
    ---  :: nil :: [ nil | -(X), -(Y), +(cp1(X,Y)), nil ] &
    ---  :: nil :: [ nil | -(X), -(Y), +(cp2(X,Y)), nil ] &
    ---  :: nil :: [ nil | -(sign(sk(A),H(X ; cp1(X,Y) ; S))), +(sign(sk(A),H(Y ; cp2(X,Y) ; S))), nil ] &
    ---  :: nil :: [ nil | -(sign(sk(A),H(Y ; cp2(X,Y) ; S))), +(sign(sk(A),H(X ; cp1(X,Y) ; S))), nil ]    
     :: nil :: [ nil | -(X1 ; X2 ; X3), -(Y1), +(cp1(X1 ; X2 ; X3,Y1)), nil ] &
     :: nil :: [ nil | -(X1 ; X2 ; X3), -(Y1), +(cp2(X1 ; X2 ; X3,Y1)), nil ] &
     :: nil :: [ nil | -(sign(sk(A),H(X1 ; X2 ; X3 ; cp1(X1 ; X2 ; X3,Y1) ; S1 ; S2))), +(sign(sk(A),H(Y1 ; cp2(X1 ; X2 ; X3,Y1) ; S1 ; S2))), nil ]
    ---  :: nil :: [ nil | -(sign(sk(A),H(Y1 ; cp2(X1 ; X2 ; X3,Y1) ; S1 ; S2))), +(sign(sk(A),H(X1 ; X2 ; X3 ; cp1(X1 ; X2 ; X3,Y1) ; S1 ; S2))), nil ]
     --------------------------------------------------------------------------
  [nonexec] .

 eq STRANDS-PROTOCOL =
    :: rA ::
    [nil | 
      +(exp(g, n(A, rA)) ; A), 
      -(EXPB ; INFB), 
      +(sign(sk(A), H(exp(g, n(A, rA)) ; A ; EXPB ; INFB))), 
      -(sign(sk(B), H2)),
      +(ok), 
      nil]
    &
    :: rB ::
    [nil | 
      -(EXPA ; INFA), 
      +(exp(g, n(B, rB)) ; B), 
      -(sign(sk(A), H1)), 
      +(sign(sk(B), H(EXPA ; INFA ; (exp(g, n(B, rB)) ; B)))),
      -(ok),
      nil]
    [nonexec] .

   eq ATTACK-STATE(3) 
      =
        --- Alice's Strand
        :: rA ::
        [ nil, 
          +(exp(g, n(a, rA)) ; a), 
          -(EXPB ; X1 ; X2 ; X3), ---
          +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; EXPB ; X1 ; X2 ; X3))),
          -(sign(sk(b), H(EXPA ; Y1 ; exp(g, n(b, rB)) ; b))),
          +(ok)
          |
          nil ]
        &
        --- Bob's Strand
        :: rB ::
        [ nil, 
          -(EXPA ; Y1),  
          +(exp(g, n(b, rB)) ; b),
          -(sign(sk(a), H(EXPA ; Y1 ; exp(g, n(b, rB)) ; b))), 
          +(sign(sk(b), H(EXPA ; Y1 ; exp(g, n(b, rB)) ; b))),
          -(ok)
          |
          nil ]
        || empty
        || nil
        || nil
        || never(
           *** for authentication
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(exp(g, n(b, rB)) ; b),
              +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              -(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              +(ok), nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a),  
                +(exp(g, n(b, rB)) ; b),
                -(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))), 
                +(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
                -(ok), nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
              *** for authentication
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(exp(g, n(b, rB)) ; b),
              +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              -(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a),  
                +(exp(g, n(b, rB)) ; b),
                -(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))), 
                +(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
                nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
              *** for authentication
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(exp(g, n(b, rB)) ; b),
              nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a),  
                +(exp(g, n(b, rB)) ; b),
                nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
                         *** To avoid trivial attacks that does not deppend on hash functions weaknesses.***
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(EXPI ; exp(g, n(b, rB)) ; b),
              +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))),
              -(sign(sk(b), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))),
              +(ok), nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a ; EXPI),  
                +(exp(g, n(b, rB)) ; b),
                -(sign(sk(a), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))), 
                +(sign(sk(b), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))),
                -(ok), nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
              )
      [nonexec] .


    eq ATTACK-STATE(4) 
      =
        --- Alice's Strand
        :: rA ::
        [ nil, 
          +(exp(g, n(a, rA)) ; a), 
          -(EXPB ; cp1(exp(g, n(a, rA)) ; a ; EXPB,EXPA) ; exp(g, n(b, rB)) ; b), ---
          +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; EXPB ; cp1(exp(g, n(a, rA)) ; a ; EXPB,EXPA) ; exp(g, n(b, rB)) ; b))),
          --- -(sign(sk(b), H(exp(g, n(a, rA)) ; a ; EXPB ; cp1(exp(g, n(a, rA)) ; a ; EXPB,EXPA) ; exp(g, n(b, rB)) ; b))),
          -(sign(sk(b), H(EXPA ; cp2(exp(g, n(a, rA)) ; a ; EXPB,EXPA) ; exp(g, n(b, rB)) ; b))),

          +(ok)
          |
          nil ]
        &
        --- Bob's Strand
        :: rB ::
        [ nil, 
          -(EXPA ; cp2(exp(g, n(a, rA)) ; a ; EXPB,EXPA)),  
          +(exp(g, n(b, rB)) ; b),
          -(sign(sk(a), H(EXPA ; cp2(exp(g, n(a, rA)) ; a ; EXPB,EXPA) ; exp(g, n(b, rB)) ; b))), 
          +(sign(sk(b), H(EXPA ; cp2(exp(g, n(a, rA)) ; a ; EXPB,EXPA) ; exp(g, n(b, rB)) ; b))),
          -(ok)
          |
          nil ]
        || empty
        || nil
        || nil
        || never(
           *** for authentication
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(exp(g, n(b, rB)) ; b),
              +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              -(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              +(ok), nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a),  
                +(exp(g, n(b, rB)) ; b),
                -(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))), 
                +(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
                -(ok), nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
              *** for authentication
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(exp(g, n(b, rB)) ; b),
              +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              -(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
              nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a),  
                +(exp(g, n(b, rB)) ; b),
                -(sign(sk(a), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))), 
                +(sign(sk(b), H(exp(g, n(a, rA)) ; a ; exp(g, n(b, rB)) ; b))),
                nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
              *** for authentication
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(exp(g, n(b, rB)) ; b),
              nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a),  
                +(exp(g, n(b, rB)) ; b),
                nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
                         *** To avoid trivial attacks that does not deppend on hash functions weaknesses.***
              (:: rA ::
              [ nil |
              +(exp(g, n(a, rA)) ; a),
              -(EXPI ; exp(g, n(b, rB)) ; b),
              +(sign(sk(a), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))),
              -(sign(sk(b), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))),
              +(ok), nil ] &
               :: rB ::
              [ nil | 
                -(exp(g, n(a, rA)) ; a ; EXPI),  
                +(exp(g, n(b, rB)) ; b),
                -(sign(sk(a), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))), 
                +(sign(sk(b), H(exp(g, n(a, rA)) ; a ; EXPI ; exp(g, n(b, rB)) ; b))),
                -(ok), nil ]
              & S:StrandSet
              || K:IntruderKnowledge)
              )
      [nonexec] .

endfm

select MAUDE-NPA .

